name: Project Board Automation

on:
  issues:
    types: [opened, reopened, closed]
  pull_request:
    types: [opened, reopened, closed, ready_for_review, merged]

permissions:
  issues: write
  pull-requests: write
  repository-projects: write
  contents: read
  projects: write

jobs:
  add_to_project:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/add-to-project@v0.5.0
        id: add-to-project
        with:
          project-url: https://github.com/users/rafaumeu/projects/4
          github-token: ${{ secrets.GH_TOKEN }}

      - name: Update issue status
        if: github.event_name == 'issues'
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          STATUS_VALUE=""
          if [[ "${{ github.event.action }}" == "opened" ]]; then
            STATUS_VALUE="${{ env.BACKLOG_OPTION_ID }}"
          elif [[ "${{ github.event.action }}" == "closed" ]]; then
            STATUS_VALUE="${{ env.DONE_OPTION_ID }}"
          fi

          if [[ -n "$STATUS_VALUE" ]]; then
            gh api graphql -f query='
              mutation($project:ID!, $item:ID!, $field:ID!, $value:String!) {
                updateProjectV2ItemFieldValue(
                  input: {
                    projectId: $project
                    itemId: $item
                    fieldId: $field
                    value: { singleSelectOptionId: $value }
                  }
                ) {
                  projectV2Item { id }
                }
              }' -f project=${{ env.PROJECT_ID }} -f item=${{ steps.add-to-project.outputs.itemId }} -f field=${{ env.STATUS_FIELD_ID }} -f value=$STATUS_VALUE
          fi

      - name: Update PR status
        if: github.event_name == 'pull_request'
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          STATUS_VALUE=""
          if [[ "${{ github.event.action }}" == "opened" ]]; then
            STATUS_VALUE="${{ env.IN_PROGRESS_OPTION_ID }}"
          elif [[ "${{ github.event.action }}" == "ready_for_review" ]]; then
            STATUS_VALUE="${{ env.REVIEW_OPTION_ID }}"
          elif [[ "${{ github.event.action }}" == "closed" && "${{ github.event.pull_request.merged }}" == "true" ]]; then
            STATUS_VALUE="${{ env.DONE_OPTION_ID }}"
          fi

          if [[ -n "$STATUS_VALUE" ]]; then
            gh api graphql -f query='
              mutation($project:ID!, $item:ID!, $field:ID!, $value:String!) {
                updateProjectV2ItemFieldValue(
                  input: {
                    projectId: $project
                    itemId: $item
                    fieldId: $field
                    value: { singleSelectOptionId: $value }
                  }
                ) {
                  projectV2Item { id }
                }
              }' -f project=${{ env.PROJECT_ID }} -f item=${{ steps.add-to-project.outputs.itemId }} -f field=${{ env.STATUS_FIELD_ID }} -f value=$STATUS_VALUE
          fi
